'use client'

import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { useRouter } from 'next/navigation'
import { PlusIcon, PencilIcon, TrashIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline'
import { SiteForm } from './site-form'
import { LoadingSpinner } from '@/components/ui/loading-spinner'

interface Site {
  id: string
  name: string
  address: string
  city: string
  state: string
  zip: string
  contactName: string
  contactEmail: string
  contactPhone: string
  practiceAreas: string
  active: boolean
  createdAt: string
  // practicum placement Agreement fields
  agreementStartMonth?: number | null
  agreementStartYear?: number | null
  agreementExpirationDate?: string | null
  staffHasActiveLicense?: string | null
  supervisorTraining?: string | null
}

// Helper function to get agreement status
const getAgreementStatus = (site: Site) => {
  if (!site.agreementExpirationDate) {
    return { status: 'unknown', label: 'Unknown', color: 'gray' }
  }
  
  const expirationDate = new Date(site.agreementExpirationDate)
  const currentDate = new Date()
  
  if (currentDate > expirationDate) {
    return { status: 'expired', label: 'Expired', color: 'red' }
  } else {
    return { status: 'active', label: 'Active', color: 'green' }
  }
}

export function SitesManagement() {
  const [showForm, setShowForm] = useState(false)
  const [editingSite, setEditingSite] = useState<Site | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [showInactive, setShowInactive] = useState(false)
  const queryClient = useQueryClient()
  const router = useRouter()

  const { data: allSites, isLoading, error } = useQuery({
    queryKey: ['sites', searchQuery],
    queryFn: async () => {
      const params = new URLSearchParams()
      if (searchQuery) params.append('query', searchQuery)
      params.append('includeInactive', 'true') // Always fetch all sites
      
      const response = await fetch(`/api/sites?${params}`)
      if (!response.ok) throw new Error('Failed to fetch sites')
      return response.json()
    },
  })

  // Filter sites based on search and active status
  const activeSites = allSites?.filter((site: Site) => 
    site.active && 
    (searchQuery === '' || 
      site.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.contactName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.contactEmail.toLowerCase().includes(searchQuery.toLowerCase()))
  ) || []

  const inactiveSites = allSites?.filter((site: Site) => 
    !site.active && 
    (searchQuery === '' || 
      site.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.contactName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.contactEmail.toLowerCase().includes(searchQuery.toLowerCase()))
  ) || []

  const deactivateSiteMutation = useMutation({
    mutationFn: async (siteId: string) => {
      const response = await fetch(`/api/sites/${siteId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: false }),
      })
      if (!response.ok) throw new Error('Failed to deactivate site')
      return response.json()
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['sites'] })
    },
  })

  const reactivateSiteMutation = useMutation({
    mutationFn: async (siteId: string) => {
      const response = await fetch(`/api/sites/${siteId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: true }),
      })
      if (!response.ok) throw new Error('Failed to reactivate site')
      return response.json()
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['sites'] })
    },
  })

  const handleEdit = (site: Site) => {
    setEditingSite(site)
    setShowForm(true)
  }

  const handleDeactivate = (siteId: string) => {
    if (confirm('Are you sure you want to deactivate this site? It will be moved to the inactive section.')) {
      deactivateSiteMutation.mutate(siteId)
    }
  }

  const handleReactivate = (siteId: string) => {
    if (confirm('Are you sure you want to reactivate this site?')) {
      reactivateSiteMutation.mutate(siteId)
    }
  }

  const handleFormClose = () => {
    setShowForm(false)
    setEditingSite(null)
  }

  const handleSiteClick = (siteId: string) => {
    router.push(`/admin/sites/${siteId}`)
  }

  const handleEditClick = (e: React.MouseEvent, site: Site) => {
    e.stopPropagation() // Prevent row click
    handleEdit(site)
  }

  const handleDeactivateClick = (e: React.MouseEvent, siteId: string) => {
    e.stopPropagation() // Prevent row click
    handleDeactivate(siteId)
  }

  const handleReactivateClick = (e: React.MouseEvent, siteId: string) => {
    e.stopPropagation() // Prevent row click
    handleReactivate(siteId)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <LoadingSpinner size="lg" />
      </div>
    )
  }

  if (error) {
    return (
      <div className="card">
        <div className="text-center py-8">
          <p className="text-red-600">Error loading sites: {error.message}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Field Sites</h1>
          <p className="text-gray-600">Manage practicum placement sites</p>
        </div>
        <button
          onClick={() => setShowForm(true)}
          className="btn-primary flex items-center"
        >
          <PlusIcon className="h-5 w-5 mr-2" />
          Add Site
        </button>
      </div>

      {/* Search and Filters */}
      <div className="card">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <MagnifyingGlassIcon className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search sites by name, contact, or email..."
                value={searchQuery}
                onChange={(e) => handleSearchChange(e.target.value)}
                className="form-input pl-10"
              />
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            <button
              onClick={handleToggleInactive}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                showInactive
                  ? 'bg-gray-200 text-gray-800'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {showInactive ? 'Show Active' : 'Show Inactive'} ({inactiveSites.length})
            </button>
          </div>
        </div>
      </div>

      {/* Active Sites */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold text-gray-900">{showInactive ? 'Inactive' : 'Active'} Sites ({currentSites.length})</h2>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200" style={{ minWidth: '1400px' }}>
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '20%' }}>
                  Site Name
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '12%' }}>
                  Location
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '20%' }}>
                  Contact
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '18%' }}>
                  Practice Areas
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '15%' }}>
                  Agreement Status
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '10%' }}>
                  Status
                </th>
                <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '5%' }}>
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {paginatedSites.map((site: Site) => (
                <tr 
                  key={site.id} 
                  className="hover:bg-gray-50 cursor-pointer transition-colors"
                  onClick={() => handleSiteClick(site.id)}
                >
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">{site.name}</div>
                    <div className="text-sm text-gray-500">{site.address}</div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {site.city}, {site.state} {site.zip}
                    </div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">{site.contactName}</div>
                    <div className="text-sm text-gray-500">{site.contactEmail}</div>
                    <div className="text-sm text-gray-500">{site.contactPhone}</div>
                  </td>
                  <td className="px-4 py-4">
                    <div className="text-sm text-gray-900 break-words">
                      {site.practiceAreas}
                    </div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                      getAgreementStatus(site).color === 'green' 
                        ? 'bg-green-100 text-green-800'
                        : getAgreementStatus(site).color === 'red'
                        ? 'bg-red-100 text-red-800'
                        : 'bg-gray-100 text-gray-800'
                    }`}>
                      {getAgreementStatus(site).label}
                    </span>
                    {site.agreementExpirationDate && (
                      <div className="text-xs text-gray-500 mt-1">
                        Expires: {new Date(site.agreementExpirationDate).toLocaleDateString('en-US', { 
                          year: 'numeric', 
                          month: 'short' 
                        })}
                      </div>
                    )}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                      Active
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      <button
                        onClick={(e) => handleEditClick(e, site)}
                        className="text-primary hover:text-accent"
                      >
                        <PencilIcon className="h-4 w-4" />
                      </button>
                      <button
                        onClick={(e) => handleDeactivateClick(e, site.id)}
                        className="text-red-600 hover:text-red-900"
                        disabled={deactivateSiteMutation.isPending}
                        title="Deactivate site"
                      >
                        <TrashIcon className="h-4 w-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>

        {activeSites.length === 0 && (
          <div className="text-center py-8">
            <p className="text-gray-500">No active sites found</p>
          </div>
        )}
      </div>


                        </div>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                        Inactive
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={(e) => handleEditClick(e, site)}
                          className="text-primary hover:text-accent"
                        >
                          <PencilIcon className="h-4 w-4" />
                        </button>
                        <button
                          onClick={(e) => handleReactivateClick(e, site.id)}
                          className="text-green-600 hover:text-green-900"
                          disabled={reactivateSiteMutation.isPending}
                          title="Reactivate site"
                        >
                          <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                          </svg>
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {inactiveSites.length === 0 && (
            <div className="text-center py-8">
              <p className="text-gray-500">No inactive sites found</p>
            </div>
          )}
        </div>
      )}

      {/* Site Form Modal */}
      {showForm && (
        <SiteForm
          site={editingSite}
          onClose={handleFormClose}
        />
      )}
    </div>
  )
}







