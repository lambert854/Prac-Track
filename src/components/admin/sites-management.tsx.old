'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { MagnifyingGlassIcon, PencilIcon, TrashIcon, PlusIcon } from '@heroicons/react/24/outline'
import { SiteForm } from './site-form'

interface Site {
  id: string
  name: string
  address: string
  city: string
  state: string
  zip: string
  contactName: string
  contactEmail: string
  contactPhone: string
  practiceAreas: string
  active: boolean
  agreementStatus: string
  agreementExpirationDate?: string
  createdAt: string
  updatedAt: string
}

export default function SitesManagement() {
  const router = useRouter()
  const queryClient = useQueryClient()
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState('')
  const [showForm, setShowForm] = useState(false)
  const [editingSite, setEditingSite] = useState<Site | null>(null)
  const [showInactive, setShowInactive] = useState(false)
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage] = useState(25)

  // Fetch sites
  const { data: sites = [], isLoading } = useQuery({
    queryKey: ['sites'],
    queryFn: async () => {
      const response = await fetch('/api/sites')
      if (!response.ok) throw new Error('Failed to fetch sites')
      return response.json()
    }
  })

  // Filter sites based on search and status
  const filteredSites = sites.filter((site: Site) => {
    const matchesSearch = !searchQuery || 
      site.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.city.toLowerCase().includes(searchQuery.toLowerCase()) ||
      site.contactName.toLowerCase().includes(searchQuery.toLowerCase())
    
    const matchesStatus = !statusFilter || 
      (statusFilter === 'active' && site.active) ||
      (statusFilter === 'inactive' && !site.active)
    
    return matchesSearch && matchesStatus
  })

  // Separate active and inactive sites
  const activeSites = filteredSites.filter((site: Site) => site.active)
  const inactiveSites = filteredSites.filter((site: Site) => !site.active)

  // Get the current sites to display (either active or inactive based on toggle)
  const currentSites = showInactive ? inactiveSites : activeSites
  
  // Pagination logic
  const totalPages = Math.ceil(currentSites.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const endIndex = startIndex + itemsPerPage
  const paginatedSites = currentSites.slice(startIndex, endIndex)

  // Reset to page 1 when switching between active/inactive or when search changes
  const handleToggleInactive = () => {
    setShowInactive(!showInactive)
    setCurrentPage(1)
  }

  const handleSearchChange = (query: string) => {
    setSearchQuery(query)
    setCurrentPage(1)
  }

  const handlePageChange = (page: number) => {
    setCurrentPage(page)
  }

  // Site form handlers
  const handleCreateSite = () => {
    setEditingSite(null)
    setShowForm(true)
  }

  const handleEditClick = (e: React.MouseEvent, site: Site) => {
    e.stopPropagation()
    setEditingSite(site)
    setShowForm(true)
  }

  const handleFormClose = () => {
    setShowForm(false)
    setEditingSite(null)
  }

  const handleSiteClick = (siteId: string) => {
    router.push(`/admin/sites/${siteId}`)
  }

  // Site activation/deactivation mutations
  const deactivateSiteMutation = useMutation({
    mutationFn: async (siteId: string) => {
      const response = await fetch(`/api/sites/${siteId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: false })
      })
      if (!response.ok) throw new Error('Failed to deactivate site')
      return response.json()
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['sites'] })
    }
  })

  const reactivateSiteMutation = useMutation({
    mutationFn: async (siteId: string) => {
      const response = await fetch(`/api/sites/${siteId}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ active: true })
      })
      if (!response.ok) throw new Error('Failed to reactivate site')
      return response.json()
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['sites'] })
    }
  })

  const handleDeactivateClick = (e: React.MouseEvent, siteId: string) => {
    e.stopPropagation()
    if (confirm('Are you sure you want to deactivate this site?')) {
      deactivateSiteMutation.mutate(siteId)
    }
  }

  const handleReactivateClick = (e: React.MouseEvent, siteId: string) => {
    e.stopPropagation()
    if (confirm('Are you sure you want to reactivate this site?')) {
      reactivateSiteMutation.mutate(siteId)
    }
  }

  // Helper function to get agreement status
  const getAgreementStatus = (site: Site) => {
    if (!site.agreementStatus) {
      return { label: 'No Agreement', color: 'red' }
    }
    
    if (site.agreementExpirationDate) {
      const expirationDate = new Date(site.agreementExpirationDate)
      const today = new Date()
      const daysUntilExpiration = Math.ceil((expirationDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))
      
      if (daysUntilExpiration < 0) {
        return { label: 'Expired', color: 'red' }
      } else if (daysUntilExpiration <= 30) {
        return { label: 'Expiring Soon', color: 'yellow' }
      } else {
        return { label: 'Valid', color: 'green' }
      }
    }
    
    return { label: 'Valid', color: 'green' }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-gray-500">Loading sites...</div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Sites Management</h1>
          <p className="text-gray-600">Manage practicum placement sites and agreements</p>
        </div>
        <button
          onClick={handleCreateSite}
          className="btn-primary flex items-center space-x-2"
        >
          <PlusIcon className="h-5 w-5" />
          <span>Add Site</span>
        </button>
      </div>

      {/* Controls */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
        <div className="flex items-center space-x-4">
          <div className="relative">
            <MagnifyingGlassIcon className="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search sites by name, city, or contact..."
              value={searchQuery}
              onChange={(e) => handleSearchChange(e.target.value)}
              className="form-input pl-10"
            />
          </div>
        </div>
        <div className="sm:w-48">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="form-select"
          >
            <option value="">All Sites</option>
            <option value="active">Active Only</option>
            <option value="inactive">Inactive Only</option>
          </select>
        </div>
      </div>

      {/* Toggle Button */}
      <div className="flex items-center space-x-4">
        <button
          onClick={handleToggleInactive}
          className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
            showInactive 
              ? 'bg-gray-200 text-gray-800' 
              : 'bg-primary text-white'
          }`}
        >
          {showInactive ? `Show Active (${activeSites.length})` : `Show Inactive (${inactiveSites.length})`}
        </button>
      </div>

      {/* Sites Table */}
      {currentSites.length > 0 && (
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 className="text-lg font-semibold text-gray-900">
              {showInactive ? 'Inactive' : 'Active'} Sites ({currentSites.length})
            </h2>
          </div>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200" style={{ minWidth: '1400px' }}>
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '20%' }}>
                    Site Name
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '12%' }}>
                    Location
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '20%' }}>
                    Contact
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '18%' }}>
                    Practice Areas
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '15%' }}>
                    Agreement Status
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '10%' }}>
                    Status
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider" style={{ width: '5%' }}>
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {paginatedSites.map((site: Site) => (
                  <tr 
                    key={site.id} 
                    className="hover:bg-gray-50 cursor-pointer transition-colors"
                    onClick={() => handleSiteClick(site.id)}
                  >
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{site.name}</div>
                      <div className="text-sm text-gray-500">{site.address}</div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="text-sm text-gray-900">
                        {site.address && (
                          <div className="text-gray-500">{site.address}</div>
                        )}
                        <div>{site.city}, {site.state} {site.zip}</div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{site.contactName}</div>
                      <div className="text-sm text-gray-500">{site.contactEmail}</div>
                      <div className="text-sm text-gray-500">{site.contactPhone}</div>
                    </td>
                    <td className="px-4 py-4">
                      <div className="text-sm text-gray-900 break-words">
                        {site.practiceAreas}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        getAgreementStatus(site).color === 'green' 
                          ? 'bg-green-100 text-green-800'
                          : getAgreementStatus(site).color === 'red'
                          ? 'bg-red-100 text-red-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {getAgreementStatus(site).label}
                      </span>
                      {site.agreementExpirationDate && (
                        <div className="text-xs text-gray-500 mt-1">
                          Expires: {new Date(site.agreementExpirationDate).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short' 
                          })}
                        </div>
                      )}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        showInactive 
                          ? 'bg-red-100 text-red-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {showInactive ? 'Inactive' : 'Active'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={(e) => handleEditClick(e, site)}
                          className="text-primary hover:text-accent"
                        >
                          <PencilIcon className="h-4 w-4" />
                        </button>
                        {showInactive ? (
                          <button
                            onClick={(e) => handleReactivateClick(e, site.id)}
                            className="text-green-600 hover:text-green-900"
                            disabled={reactivateSiteMutation.isPending}
                            title="Reactivate site"
                          >
                            <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                          </button>
                        ) : (
                          <button
                            onClick={(e) => handleDeactivateClick(e, site.id)}
                            className="text-red-600 hover:text-red-900"
                            disabled={deactivateSiteMutation.isPending}
                            title="Deactivate site"
                          >
                            <TrashIcon className="h-4 w-4" />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {currentSites.length === 0 && (
        <div className="text-center py-12">
          <div className="text-gray-500 text-lg">
            {showInactive ? 'No inactive sites found' : 'No active sites found'}
          </div>
          <div className="text-gray-400 text-sm mt-2">
            {searchQuery ? 'Try adjusting your search criteria' : 'Click "Add Site" to create a new site'}
          </div>
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between px-4 py-3 bg-white border-t border-gray-200 sm:px-6">
          <div className="flex-1 flex justify-between sm:hidden">
            <button
              onClick={() => handlePageChange(currentPage - 1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Previous
            </button>
            <button
              onClick={() => handlePageChange(currentPage + 1)}
              disabled={currentPage === totalPages}
              className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Next
            </button>
          </div>
          <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
              <p className="text-sm text-gray-700">
                Showing{' '}
                <span className="font-medium">{startIndex + 1}</span>
                {' '}to{' '}
                <span className="font-medium">{Math.min(endIndex, currentSites.length)}</span>
                {' '}of{' '}
                <span className="font-medium">{currentSites.length}</span>
                {' '}results
              </p>
            </div>
            <div>
              <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 1}
                  className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span className="sr-only">Previous</span>
                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
                
                {/* Page numbers */}
                {Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => {
                  // Show first page, last page, current page, and pages around current page
                  if (
                    page === 1 ||
                    page === totalPages ||
                    (page >= currentPage - 1 && page <= currentPage + 1)
                  ) {
                    return (
                      <button
                        key={page}
                        onClick={() => handlePageChange(page)}
                        className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                          page === currentPage
                            ? 'z-10 bg-primary border-primary text-white'
                            : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                        }`}
                      >
                        {page}
                      </button>
                    )
                  } else if (
                    page === currentPage - 2 ||
                    page === currentPage + 2
                  ) {
                    return (
                      <span key={page} className="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                        ...
                      </span>
                    )
                  }
                  return null
                })}
                
                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage === totalPages}
                  className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <span className="sr-only">Next</span>
                  <svg className="h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                  </svg>
                </button>
              </nav>
            </div>
          </div>
        </div>
      )}

      {/* Site Form Modal */}
      {showForm && (
        <SiteForm
          site={editingSite}
          onClose={handleFormClose}
        />
      )}
    </div>
  )
}
